version: '3.7'

services:
  kafka:
    image: docker.redpanda.com/redpandadata/redpanda:v24.3.5
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://kafka:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://kafka:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr kafka:33145
      - --advertise-rpc-addr kafka:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    networks:
      dfds-selfservice-development:
        aliases:
          - kafka
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
    ports:
      - 9092:9092
      - 19092:19092

  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:v2.8.2
    networks:
      dfds-selfservice-development:
        aliases:
          - redpanda-console
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console -config.filepath=${CONFIG_FILEPATH:-/tmp/config.yml}'
    volumes:
      - ./redpanda-config:/tmp/config/
    environment:
      CONFIG_FILEPATH: ${CONFIG_FILEPATH:-/tmp/config.yml}
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://kafka:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://kafka:9644"]
    ports:
      - 7080:8080
    depends_on:
      - kafka

  kafka-setup:
    image: confluentinc/cp-kafka:7.7.1
    labels:
      cloud.dfds.dev-build: true
    networks:
      dfds-selfservice-development:
        aliases:
          - kafka-setup
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      sh -c '
      # Blocks until kafka is reachable
      echo -e "Waiting for kafka to be reachable"
      kafka-topics --bootstrap-server kafka:9092 --list > /dev/null

      declare -a topics=(
        "cloudengineering.selfservice.apispecs"
        "cloudengineering.selfservice.capability"
        "cloudengineering.selfservice.membership"
        "cloudengineering.selfservice.member"
        "cloudengineering.selfservice.membershipapplication"
        "cloudengineering.selfservice.awsaccount"
        "cloudengineering.selfservice.azureresourcegroup"
        "cloudengineering.selfservice.kafkaclusteraccess"
        "cloudengineering.selfservice.kafkatopic"
        "cloudengineering.selfservice.messagecontract"
        "cloudengineering.selfservice.portalvisit"
        "cloudengineering.confluentgateway.provisioning"
        "cloudengineering.confluentgateway.schema"
        "cloudengineering.confluentgateway.access"
        "cloudengineering.selfservice.azureresourcegroup"
        "build.selfservice.events.capabilities"
      )

      total_topics=$${#topics[@]}
      completed_topics=0

      for topic in $${topics[@]}; do
        ((completed_topics++))
        echo -e "Creating topic: $$topic ($$completed_topics/$$total_topics)"
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic $$topic
        if [ $$? -eq 0 ]; then
          echo -e "Successfully created topic: $$topic"
        else
          echo -e "Failed to create topic: $$topic"
        fi
      done

      echo -e "Success!"
      '
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

networks:
  dfds-selfservice-development:
    name: dfds-selfservice-development
    labels:
      cloud.dfds.dev-build: true